from google.cloud import storage
import cv2
import numpy as np
import os
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

# Configuratie
NUM_CLASSES = 5
csv_bucket_name = 'csvbuckethelloenergy'
csv_file_blob_name = 'labels.csv'
csv_file_local_path = 'labels.csv'
image_bucket_name = 'datasetmeters'
prefix = ''

# Verbind met de Google Cloud Storage-client
def download_blob(bucket_name, source_blob_name, destination_file_name):
    """Downloads a blob from the bucket."""
    storage_client = storage.Client()
    bucket = storage_client.bucket(bucket_name)
    blob = bucket.blob(source_blob_name)
    blob.download_to_filename(destination_file_name)
    print(f'Blob {source_blob_name} gedownload naar {destination_file_name}.')

def upload_blob(bucket_name, source_file_name, destination_blob_name):
    """Uploads a file to the bucket."""
    storage_client = storage.Client()
    bucket = storage_client.bucket(bucket_name)
    blob = bucket.blob(destination_blob_name)
    blob.upload_from_filename(source_file_name)
    print(f'Bestand {source_file_name} ge√ºpload naar {destination_blob_name}.')

def load_labels(csv_file):
    """Laad labels uit het CSV-bestand."""
    df = pd.read_csv(csv_file, encoding='latin1')
    print(df)  # Druk de inhoud van het CSV-bestand af
    return dict(zip(df.filename, df.label))

def update_csv_with_new_files():
    """Werk het CSV-bestand bij met nieuwe bestanden uit de bucket."""
    # Download het bestaande CSV-bestand
    download_blob(csv_bucket_name, csv_file_blob_name, csv_file_local_path)

    # Laad het bestaande CSV-bestand
    try:
        df = pd.read_csv(csv_file_local_path, encoding='latin1')
    except FileNotFoundError:
        df = pd.DataFrame(columns=['filename', 'label'])

    existing_files = set(df['filename'])

    # Lijst van bestanden in de afbeelding-bucket
    storage_client = storage.Client()
    image_bucket = storage_client.get_bucket(image_bucket_name)
    blobs = image_bucket.list_blobs(prefix=prefix)

    # Zoek nieuwe bestanden die nog niet in het CSV-bestand staan
    new_files = []
    for blob in blobs:
        if blob.name not in existing_files:
            new_files.append(blob.name)

    # Voeg nieuwe bestanden toe aan het DataFrame
    for new_file in new_files:
        # Voeg hier de logica toe om het juiste label te bepalen
        label = 0  # Voor nu wordt een standaardlabel 0 toegevoegd
        df = df.append({'filename': new_file, 'label': label}, ignore_index=True)

    # Sla het bijgewerkte CSV-bestand op
    df.to_csv(csv_file_local_path, index=False)

    # Upload het bijgewerkte CSV-bestand terug naar de bucket
    upload_blob(csv_bucket_name, csv_file_local_path, csv_file_blob_name)

# Voer de CSV-update uit voordat je verdergaat
update_csv_with_new_files()

# Laad labels
labels_dict = load_labels(csv_file_local_path)

# Lijst van bestanden in de afbeelding-bucket
storage_client = storage.Client()
image_bucket = storage_client.get_bucket(image_bucket_name)
blobs = image_bucket.list_blobs(prefix=prefix)

# Debugging: Print de namen van de blobs
print("Bestanden in de afbeelding-bucket:")
blob_names = [blob.name for blob in blobs]
for name in blob_names:
    print(name)

# Laad de afbeeldingen vanuit Google Cloud Storage en voer de gewenste bewerkingen uit
images = []
labels = []  # Voeg labels toe aan je dataset

for name in blob_names:
    if name in labels_dict:  # Controleer of de bestandsnaam in het labels_dict zit
        url = f"https://storage.googleapis.com/{image_bucket_name}/{name}"
        # Debugging: Print de URL van het bestand dat wordt gedownload
        print(f"Downloaden van: {url}")

        # Download de afbeelding naar een tijdelijk bestand
        temp_file = 'temp.jpg'
        download_blob(image_bucket_name, name, temp_file)

        # Lees de afbeelding in met OpenCV
        image = cv2.imread(temp_file)

        if image is not None:
            # Voeg je preprocessing en labeling hier toe
            images.append(image)
            labels.append(labels_dict[name])
        else:
            print(f"Kon de afbeelding niet laden: {temp_file}")

        # Verwijder het tijdelijke bestand
        os.remove(temp_file)

# Controleer of er afbeeldingen zijn geladen
if len(images) == 0:
    raise ValueError("Geen afbeeldingen geladen. Controleer of de bestandsnamen en paden correct zijn.")

# Converteer lijsten naar numpy arrays
images = np.array(images)
labels = np.array(labels)

# Controleer de vorm van de images array
print(f"Shape van images array: {images.shape}")

# Bouw het model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(images.shape[1], images.shape[2], images.shape[3])),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(NUM_CLASSES, activation='softmax')
])

# Compileer het model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train het model
model.fit(images, labels, epochs=10)

# Sla het model op
model.save('saved_model')
