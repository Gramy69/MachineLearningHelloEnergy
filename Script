from google.cloud import storage
import cv2
import numpy as np
import os
import pandas as pd
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense

# Definieer het aantal klassen
NUM_CLASSES = 5

# Verbind met de Google Cloud Storage-client
def download_blob(bucket_name, source_blob_name, destination_file_name):
    """Downloads a blob from the bucket."""
    storage_client = storage.Client()
    bucket = storage_client.bucket(bucket_name)
    blob = bucket.blob(source_blob_name)
    blob.download_to_filename(destination_file_name)
    print(f'Blob {source_blob_name} gedownload naar {destination_file_name}.')

# Functie om labels uit het CSV-bestand te laden
def load_labels(csv_file):
    df = pd.read_csv(csv_file)
    print(df)  # Druk de inhoud van het CSV-bestand af
    return dict(zip(df.filename, df.label))

# Laad labels vanuit de CSV-bucket
csv_bucket_name = 'csvbuckethelloenergy'  # Vervang dit door de naam van je CSV-bucket
csv_file_blob_name = 'labels.csv'  # Zorg ervoor dat dit pad correct is in de CSV-bucket
csv_file_local_path = 'labels.csv'
download_blob(csv_bucket_name, csv_file_blob_name, csv_file_local_path)

# Laad labels
labels_dict = load_labels(csv_file_local_path)

# Lijst van bestanden in de afbeelding-bucket
image_bucket_name = 'datasetmeters'
prefix = ''  # Prefix voor de bestandsnamen in de bucket is leeg omdat de afbeeldingen in de hoofdmap staan
storage_client = storage.Client()
image_bucket = storage_client.get_bucket(image_bucket_name)
blobs = image_bucket.list_blobs(prefix=prefix)

# Debugging: Print de namen van de blobs
print("Bestanden in de afbeelding-bucket:")
blob_names = [blob.name for blob in blobs]
for name in blob_names:
    print(name)

# Laad de afbeeldingen vanuit Google Cloud Storage en voer de gewenste bewerkingen uit
images = []
labels = []  # Voeg labels toe aan je dataset

for name in blob_names:
    if name in labels_dict:  # Controleer of de bestandsnaam in het labels_dict zit
        url = f"https://storage.googleapis.com/{image_bucket_name}/{name}"
        # Debugging: Print de URL van het bestand dat wordt gedownload
        print(f"Downloaden van: {url}")

        # Download de afbeelding naar een tijdelijk bestand
        temp_file = 'temp.jpg'
        download_blob(image_bucket_name, name, temp_file)

        # Lees de afbeelding in met OpenCV
        image = cv2.imread(temp_file)

        if image is not None:
            # Voeg je preprocessing en labeling hier toe
            images.append(image)
            labels.append(labels_dict[name])
        else:
            print(f"Kon de afbeelding niet laden: {temp_file}")

        # Verwijder het tijdelijke bestand
        os.remove(temp_file)

# Controleer of er afbeeldingen zijn geladen
if len(images) == 0:
    raise ValueError("Geen afbeeldingen geladen. Controleer of de bestandsnamen en paden correct zijn.")

# Converteer lijsten naar numpy arrays
images = np.array(images)
labels = np.array(labels)

# Controleer de vorm van de images array
print(f"Shape van images array: {images.shape}")

# Bouw het model
model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(images.shape[1], images.shape[2], images.shape[3])),
    MaxPooling2D((2, 2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(NUM_CLASSES, activation='softmax')
])

# Compileer het model
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

# Train het model
model.fit(images, labels, epochs=10)

# Sla het model op
model.save('saved_model')
